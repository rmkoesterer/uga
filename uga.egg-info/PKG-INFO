Metadata-Version: 1.1
Name: uga
Version: 1.0b1
Summary: Universal Genome Analyst (uga) is a tool designed to assist biomedical researchers in complex genomic data analysis
Home-page: UNKNOWN
Author: Ryan Koesterer
Author-email: uga-feedback@gmail.com
License: UNKNOWN
Description: Universal Genome Analyst
        ========================
          
        Universal Genome Analyst (uga) is a tool designed to assist biomedical researchers in complex genomic data analysis, making use of many powerful existing 
        R packages and Python modules along with large scale computing cluster integration to provide the following features:
        
        * Compatibility with standard VCF4.1/4.2, Oxford (Impute2 output with 3 probabilities for each genotype), Plink binary, and various single allele dosage format files
        * Mapping of files based on region size or number of markers for splitting analyses
        * Automatic deployment of jobs on parallel computing systems using qsub
        * Verification and compilation of parallel distributed jobs
        * Marker association modelling
           * generalized linear models
           * linear mixed effects models
           * generalized estimating equations
           * survival analysis
        * Gene/Locus based association modelling
           * effective test correction
           * burden test
           * sequence kernel association test (SKAT)
           * optimal unified sequence kernel association test (SKAT-O)
           * family Based SKAT and SKAT-O
        * Meta analysis
           * uses unique marker naming based on both position and alleles to allow compatibility between multiple marker naming conventions
        * automatically aligns compatible markers alleles, eliminating the need to align input results manually
        * Optional genomic inflation correction (genomic control)
        * Publication quality Q-Q and Manhattan Plots
        * Regional Plots using Locuszoom software
        * Results filtering and reporting
        * Gzip and Bgzip / Tabix mapped output where possible to save disc space
        * User definable buffered reading for RAM usage control
        * Report compatibility for annotation with SnpEff and SnpSift
        
        Installation
        ************
        
        This software connects an array of Python and R based packages that may lead to incompatibilities in your system Python installation. Thus, it may be simpler for users
        to install a Python virtual environment to avoid disrupting system Python functionality. Additionally, **uga** requires an installation of R and a few packages used for analysis 
        and plotting. The following lists are necessary tools that **uga** needs to perform all tasks. Python modules are easiest installed using pip as described in the section labeled 
        'Installation'. The following lists display versions used during development.
        
        **Python** (2.7.7)
        
        Python modules required (may not be part of the Python base install), followed by versions used during development:
        
           * singledispatch (3.4.0.3)
           * rpy2 (2.5.2)
           * multi-key-dict (2.0.1)
           * numpy (1.9.1)
           * pandas (0.15.1)
           * progressbar (2.3)
           * psutil (2.1.3)
           * pytabix (0.1)
           * scipy (0.14.0)
           * biopython (1.64)
           * plinkio (0.9.5)
        
        **R** (3.1.1)
        
        R libraries needed for certain analytical and plotting tasks, followed by versions used during development:
        
           * ggplot2 (1.0.0)
           * geepack (1.1-6)
           * lme4 (1.1-7)
           * survival (2.37-7)
           * seqMeta (1.5)
           
        Some of these libraries may have dependencies which will need to be installed as well.
           
        **Tabix and bgzip**
        
        In order to reduce file clutter and encourage the consolidation and compression of data and results files, **uga** makes extensive use of both Tabix and bgzip. 
        These tools are generally released as part of the `Samtools`_ software suite.
        
        .. _`Samtools`: http://www.htslib.org/
        
        **Locuszoom**
        
        In order to plot regional results, you must install `Locuszoom`_. 
        	
        .. _`Locuszoom`: http://genome.sph.umich.edu/wiki/LocusZoom_Standalone
        
        Also, in order for **uga** to find Locuszoom on your system, you will need to create a symbolic link in your home directory.
        
           >>> ln -s PATH_TO_LOCUSZOOM/bin/locuszoom ~/locuszoom
        
        **Pre-Installation Requirements**
        
        Before installing uga, in order to have full functionality, the following needs to be installed and working (see above for development version information):
        
           * `Python`_ (base install)
           * `virtualenv`_ (Python module)
           * `R`_ (base install), plus the following libraries as needed
              - `ggplot2`_
              - `geepack`_
              - `lme4`_
              - `survival`_
              - `seqMeta`_
              - `kinship2`_
           * `Tabix`_
           * `bgzip`_
           * `Locuszoom`_
        
        .. _`Python`: https://www.python.org/
        .. _`virtualenv`: https://virtualenv.pypa.io/en/latest/
        .. _`R`: http://www.r-project.org/
        .. _`ggplot2`: http://cran.r-project.org/web/packages/ggplot2/index.html
        .. _`geepack`: http://cran.r-project.org/web/packages/geepack/index.html
        .. _`lme4`: http://cran.r-project.org/web/packages/lme4/index.html
        .. _`survival`: http://cran.r-project.org/web/packages/survival/index.html
        .. _`seqMeta`: http://cran.r-project.org/web/packages/seqMeta/index.html
        .. _`kinship2`: http://cran.r-project.org/web/packages/kinship2/index.html
        .. _`Tabix`: http://www.htslib.org/
        .. _`bgzip`: http://www.htslib.org/
        .. _`Locuszoom`: http://genome.sph.umich.edu/wiki/LocusZoom_Standalone
        
        In order to avoid potential errors during installation, you may need to add the location of the R library libR.so file to your BASH_PROFILE 
        (ie. .bashrc, .bash_profile, etc). The following command will search your system for this file.
           
           >>> find /usr -name libR.so
        	  
        Add the resulting path, X, to the following line and add it to your BASH_PROFILE.
           
           export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:X
        	  
        Make sure you source your BASH_PROFILE again before continuing with the install.
           
           >>> source BASH_PROFILE
        
        **Virtual Environment Preparation**
        
        Installing uga under a Python virtual environment will ensure that the modules required by uga won't interrupt your system Python install. 
        Install and activate a virtual environment called 'uga-env' as follows:
        
           >>> mkdir uga-env
           >>> virtualenv -p python uga-env
           >>> source uga-env/bin/activate
        
        You are now operating a clean base Python installation under a virtual environment.
        
        **Installing uga with pip**
        
        The simplest way to install uga is with pip, as follows.
        
           >>> pip install uga
        
        **Installing uga from source**
        
        To install uga from source uga-0.1b3.tar.gz, first untar and unzip the file
           
           >>> tar -xvf uga-0.1b3.tar.gz
           >>> cd uga-0.1b3
           >>> pip install -r requirements.txt
           >>> python setup.py install
           >>> cp bin/.uga_wrapper.py ~/
        
        **Note**: If installing uga under a virtual environment, you need to source the environment as shown above before running any task in uga.
        
        Verify that uga is accessible using the following command to display help.
        
           >>> uga -h
        
        **Parallel computing**
        
        While you may simply run uga on a single cpu system, if you have access to a parallel computing cluster, 
        you will be able to take advantage of the self-managed parallel mode of use for which this software was designed. 
        This release was tested on a system which deploys Sun Grid Engine for job management, but simple modifications to
        the .uga_wrapper.py script in the bin/ directory may allow the use of other PBS systems.
        
        References
        ==========
        
        Manuscript to be submitted
        
        Contact
        =======
        
        - **Author**: `Ryan Koesterer`_
        
        `Documentation`_
        
        .. _`Ryan Koesterer`: uga-feedback@gmail.com
        .. _`Documentation`: http://rmkoesterer.github.io/uga-doc/
        
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 2.7
Classifier: Development Status :: 4 - Beta
Classifier: License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)
Classifier: Topic :: Scientific/Engineering :: Bio-Informatics
